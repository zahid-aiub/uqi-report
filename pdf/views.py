import os
import json
import csv
from datetime import datetime
import pdfkit
from django.http import HttpResponse
from rest_framework.decorators import api_view
from rest_framework import status
from pdf_maker.settings import PATH_WKHTMLTOPDF
from json2html import *
import pandas as pd


@api_view(['GET', 'POST'])
def pdf_generate_from_url(request):
    if request.method == 'GET':
        print("########## GET Method Calling... ###########")
        # return HttpResponse('Get Request Not Allowed!')
        return HttpResponse(status=status.HTTP_405_METHOD_NOT_ALLOWED)

    elif request.method == 'POST':
        url = request.data['url_name']

        if url:
            config = pdfkit.configuration(wkhtmltopdf=PATH_WKHTMLTOPDF)
            options = {
                'page-size': 'A4',
                'margin-top': '0.6in',
                'margin-right': '0.3in',
                'margin-bottom': '0.3in',
                'margin-left': '0.5in',
                'minimum-font-size': '13',
                'dpi': 100,
                'footer-line': '',
                'footer-left': "Generated By UkiTech",
                'footer-font-size': '10',
                'footer-right': '[page] of [topage]',
            }

            output = pdfkit.from_url(url, 'media/output_file.pdf', configuration=config)
            # output = pdfkit.from_url(url, output_path=False, configuration=config)
            response = HttpResponse(content_type="application/pdf")
            response.write(output)
            return response

        else:
            return HttpResponse('No URL Present!')


## todo: this api didn't wiork for large html. we have to work on it
@api_view(['POST'])
def pdf_generate_from_html(request):
    if 'data' in request.POST:
        html = request.POST['data']
        config = pdfkit.configuration(wkhtmltopdf=PATH_WKHTMLTOPDF)
        try:
            output = pdfkit.from_string(html, 'media/fromHtml.pdf', configuration=config)
            # output = pdfkit.from_string(html, output_path=False, configuration=config)
        except:
            print("Json parse error!")
            return HttpResponse("Json parse error!")

        response = HttpResponse(content_type="application/pdf")
        response.write(output)
        return response

    else:
        return HttpResponse('No HTML element found!')


@api_view(['POST'])
def json_to_html(request):
    config = pdfkit.configuration(wkhtmltopdf=PATH_WKHTMLTOPDF)

    if 'data' in request.POST:
        data = request.POST['data']
        json_data = json.loads(data)
        try:
            html = json2html.convert(json=json_data)
            print("================================================")
            print(html)
            print("================================================")
            output = pdfkit.from_string(html, output_path=False, configuration=config)
        except:
            print("Json parse error!")
            return HttpResponse("Json parse error!")

        response = HttpResponse(content_type="application/pdf")
        response.write(output)
        return response

    else:
        return HttpResponse('No Content!')


@api_view(['POST'])
def json_to_csv(request):
    if 'data' in request.POST:
        data = request.POST['data']
        try:
            load_data = json.loads(data)
            json_data = load_data['main_data']
            data_file = open('data_file.csv', 'w')
            csv_writer = csv.writer(data_file)
        except:
            print("Json parse error!")
            return HttpResponse("Json parse error!")

        count = 0
        for item in json_data:
            if count == 0:
                header = item.keys()
                csv_writer.writerow(header)
                count += 1

            csv_writer.writerow(item.values())

        data_file.close()
        response = HttpResponse(content_type="text/csv")
        response.write(data_file)
        return response

    else:
        return HttpResponse('No data found!')


@api_view(['POST'])
def json_to_xls(request):
    if 'data' in request.POST:
        json_data = request.POST['data']

        ## todo: sample input data
        # json_data = """
        #     [
        #         {
        #             "SortAs": "SGML",
        #             "GlossTerm": "Standard Generalized Markup Language",
        #             "Acronym": "SGML",
        #             "Abbrev": "ISO 8879:1986"
        #
        #         },
        #         {
        #             "SortAs": "SGML",
        #             "GlossTerm": "Standard Generalized Markup Language",
        #             "Acronym": "SGML",
        #             "Abbrev": "ISO 8879:1986"
        #
        #         },
        #         {
        #             "SortAs": "SGML",
        #             "GlossTerm": "Standard Generalized Markup Language",
        #             "Acronym": "SGML",
        #             "Abbrev": "ISO 8879:1986"
        #
        #         },
        #         {
        #             "SortAs": "SGML",
        #             "GlossTerm": "Standard Generalized Markup Language",
        #             "Acronym": "SGML",
        #             "Abbrev": "ISO 8879:1986"
        #
        #         },
        #         {
        #             "SortAs": "SGML",
        #             "GlossTerm": "Standard Generalized Markup Language",
        #             "Acronym": "SGML",
        #             "Abbrev": "ISO 8879:1986"
        #
        #         }
        #     ]
        # """

        try:
            data_file = pd.read_json(json_data).to_excel("exel_data.xls")
            response = HttpResponse(content_type="application/vnd.ms-excel")
            response.write(data_file)
            return response
        except:
            print("Json parse error!")
            return HttpResponse("Json parse error!")

    else:
        return HttpResponse('No data found!')
